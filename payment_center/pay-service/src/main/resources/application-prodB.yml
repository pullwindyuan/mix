server:
  port: 3020

spring:
  application:
      name: payment-service
  jackson:
      date-format: yyyy-MM-dd HH:mm:ss
      time-zone: GMT+8
      default-property-inclusion: non_null
  datasource:
    #url: jdbc:mysql://bibi-pay-center.mysql.polardb.cnsh.rds.aliyuncs.com:3306/xxpaydb?useUnicode=true&characterEncoding=utf-8&autoReconnect=true&useSSL=false
    #url: jdbc:mysql://pi-uf6m31m75kac85uxz.mysql.polardb.cnsh.rds.aliyuncs.com:3306/xxpaydb?useUnicode=true&characterEncoding=utf-8&autoReconnect=true&useSSL=false
    #username: bibi_pay_center
    #password: szHLx5
    url: jdbc:mysql://rm-wz9a15wv8z6x8v9qz.mysql.rds.aliyuncs.com:3306/pay_center?useUnicode=true&characterEncoding=utf-8&autoReconnect=true&useSSL=false
    username: pay_center
    password: hGX2pftA6P
  # 使用druid数据源
#    type: com.alibaba.druid.pool.DruidDataSource
#    driver-class-name: com.mysql.jdbc.Driver
    initialSize: 5    # 初始化大小
    minIdle: 5        # 最小
    maxActive: 20     # 最大
    maxWait: 60000    # 获取连接等待超时的时间
    timeBetweenEvictionRunsMillis: 60000    # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
    minEvictableIdleTimeMillis: 300000      # 配置一个连接在池中最小生存的时间，单位是毫秒
    validationQuery: SELECT 1 FROM DUAL
    testWhileIdle: true
    testOnBorrow: false
    testOnReturn: false
    poolPreparedStatements: true                   # 打开PSCache
    maxPoolPreparedStatementPerConnectionSize: 20   # 指定每个连接上PSCache的大小
    filters: stat,wall,log4j                        # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000  # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
    #druid:
    #    filters: stat
    #    maxActive: 20
    #    initialSize: 1
    #    maxWait: 60000
    #    minIdle: 1
    #    timeBetweenEvictionRunsMillis: 60000
    #    minEvictableIdleTimeMillis: 300000
    #    validationQuery: select 'x'
    #    testWhileIdle: true
    #    testOnBorrow: false
    #    testOnReturn: false
    #    poolPreparedStatements: true
    #    maxOpenPreparedStatements: 20
  redis:
      database: 1
      host: ${REDIS_HOST:r-wz994061cc75f644.redis.rds.aliyuncs.com}
      port: ${REDIS_PORT:6379}
      password: i78kJrengi5
      pool:
          max-active: 20
  rabbitmq:
      host: ${RABBIT_MQ_HOST:172.18.0.5}
      port:  ${RABBIT_MQ_PORT:5672}
      username: ms-rabbitmq
      password: SZHL@qx17
  zipkin:
      enabled: true
  sleuth:
    sampler:
      percentage: 1

#  activemq:
#    broker-url: failover:(tcp://120.24.46.96:61616?wireFormat.maxInactivityDuration=0)
#    in-memory: true
#    pool:
#      enabled: true # 如果此处设置为true，需要加activemq-pool依赖包，否则会自动配置失败，报JmsMessagingTemplate注入失败
#mybatis:
#    mapper-locations: "classpath*:mapper/*.xml"
  freemarker:
      cache: false
      charset: UTF-8
      check-template-location: true
      content-type: text/html
      expose-request-attributes: true
      expose-session-attributes: true
      request-context-attribute: request
      suffix: .ftl
      templateEncoding: UTF-8
      templateLoaderPath: classpath:/templates/
config:
  ali:
    notify_url: http://pay.bibitrip.com/api/open/notify/pay/aliPayNotifyRes.htm
    return_url: http://pay.bibitrip.com
  wx:
    certRootPath: /home/pay/cert/wx
    notifyUrl: http://pay.bibitrip.com/api/open/notify/pay/wxPayNotifyRes.htm
  union:
    serverContextUrl: http://pay.bibitrip.com/api/open
    frontNotifyUrl: http://www.bibitrip.com
    backNotifyUrl: http://pay.bibitrip.com/api/open/notify/pay/unionPayNotifyRes

logging:
  file: ./log/xxpay4spring-boot.log

#Twitter_Snowflake 序列号生成器配置
Snowflake:
  #工作中心ID 0-31
  workerId: ${random.int[0,31]}
  #数据中心ID(0~31)
  datacenterId: ${random.int[0,31]}

#增加cloud配置
eureka:
    instance:
        hostname: ${spring.cloud.client.ipAddress}
        instance-id: ${spring.cloud.client.ipAddress}:${server.port}
        statusPageUrlPath: /info
        healthCheckUrlPath: /health
        # docker 部署开启
        prefer-ip-address: true
        #ip-address位本服务的部署地址
        #ip-address: 172.18.0.7
    client:
        serviceUrl:
           #defaultZone: http://172.18.0.5:8761/eureka/
                    # docker 部署开启
            defaultZone: http://${EUREKA_HOST:172.18.0.17}:${EUREKA_PORT:8761}/eureka/,http://${EUREKA_HOST:172.18.0.18}:${EUREKA_PORT:8761}/eureka/,http://${EUREKA_HOST:172.18.0.19}:${EUREKA_PORT:8761}/eureka/
            #defaultZone: http://${EUREKA_HOST:47.106.85.82}:${EUREKA_PORT:8761}/eureka/
# 必须配置
feign:
  httpclient:
    enabled: false
  okhttp:
    enabled: true

ribbon:
  eureka:
    enabled: true
  ReadTimeout: 120000
  ConnectTimeout: 120000
  MaxAutoRetries: 0
  MaxAutoRetriesNextServer: 1
  OkToRetryOnAllOperations: false

hystrix:
  threadpool:
    default:
      coreSize: 1000 ##并发执行的最大线程数，默认10
      maxQueueSize: 1000 ##BlockingQueue的最大队列数
      queueSizeRejectionThreshold: 500 ##即使maxQueueSize没有达到，达到queueSizeRejectionThreshold该值后，请求也会被拒绝
  command:
    default:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 110000

mq:
    prefix: prod
card:
    post:
        url: http://47.106.86.78:6062/api/user/makeDistProfitSplitByPay?